# This file is in the public domain.

_arch_compgen() {
  local i r
  COMPREPLY=($(compgen -W '$*' -- "$cur"))
  for ((i=1; i < ${#COMP_WORDS[@]}-1; i++)); do
    for r in ${!COMPREPLY[@]}; do
      if [[ ${COMP_WORDS[i]} = ${COMPREPLY[r]} ]]; then
        unset 'COMPREPLY[r]'; break
      fi
    done
  done
}

_arch_ptr2comp() {
  local list= x y
  for x; do
    for y in '0 --' '1 -'; do
      eval 'set -- ${'$x'[${y% *}]}'
      list+=\ ${@/#/${y#* }}
    done
  done
  _arch_compgen $list
}

_arch_incomp() {
  local r="\s-(-${1#* }\s|\w*${1% *})"; [[ $COMP_LINE =~ $r ]]
}

_pacman_keyids() {
  \pacman-key --list-keys 2>/dev/null | awk '
    $1 == "pub" {
      # key id
      split($2, a, "/"); print a[2]
    }
    $1 == "uid" {
      # email
      if (match($NF, /<[^>]+>/))
        print substr($NF, RSTART + 1, RLENGTH - 2)
    }'
}

_pacman_pkg() {
  _arch_compgen "$(
    if [[ $2 ]]; then
      \pikaur -$1 2>/dev/null | \cut -d' ' -f1 | \sort -u
    else
      \pikaur -$1 2>/dev/null
    fi
  )"
}

_pikaur_get_aur_packages() {
  local cacheFile=$1
  local aurPackagesURL='https://aur.archlinux.org/packages.gz'
  local tmpFile
  tmpFile="$(mktemp)"
  curl -f -s "${aurPackagesURL}" -o "${tmpFile}"
  local returnStatus=$?
  if [ "${returnStatus}" -eq 0 ]; then
    \mv "${tmpFile}" "${cacheFile}" 2>/dev/null
  else
    \rm "${tmpFile}"
  fi
}

_pikaur_cached_search() {
  local repoPackageNames
  repoPackageNames="$(\pacman -Ssq)" # pacman is faster then pikaur -Ssqo
  local cacheDir="${XDG_CACHE_HOME:-$HOME/.cache}/pikaur_bash-completion"
  if [ ! -e "${cacheDir}" ]; then
    \mkdir -p "${cacheDir}" || return
    \chmod 0700 "${cacheDir}"
  fi
  local cacheFile="${cacheDir}/aur-packages.gz"
  local maxCacheFileAge=86400 # 24 hours * 60 minutes * 60 seconds
  local cacheFileAge=${maxCacheFileAge}
  if [ -f "${cacheFile}" ]; then
    cacheFileAge="$(($(date +"%s") - $(date -r "${cacheFile}" +%s)))"
  fi
  local aurPackageNames=""
  local fileReadStatus
  if [ -r "${cacheFile}" ]; then
    aurPackageNames="$(zcat "${cacheFile}" 2>/dev/null | tail -n+2)"
    fileReadStatus=$?
  fi
  if [ ! -e "${cacheFile}" ] || [ "${fileReadStatus}" -ne 0 ] || [ "${cacheFileAge}" -ge "${maxCacheFileAge}" ]; then
    (_pikaur_get_aur_packages "${cacheFile}" &)
  fi
  _arch_compgen "${repoPackageNames} ${aurPackageNames}"
}

_pacman() {
  local common core cur database files prev query remove sync upgrade o
  COMPREPLY=()
  _get_comp_words_by_ref cur prev
  database=('asdeps asexplicit')
  files=('list machinereadable owns search refresh regex' 'l o s x y')
  query=('changelog check deps explicit file foreign groups info list owns
          search unrequired upgrades' 'c e g i k l m o p s t u')
  remove=('cascade dbonly nodeps assume-installed nosave print recursive unneeded' 'c n p s u')
  sync=('asdeps asexplicit clean dbonly downloadonly force groups ignore ignoregroup
         info list needed nodeps assume-installed print refresh recursive search sysupgrade'
        'c g i l p s u w y')
  upgrade=('asdeps asexplicit force needed nodeps assume-installed print recursive' 'p')
  common=('arch cachedir color config confirm dbpath gpgdir help hookdir logfile
           namesonly noconfirm noedit edit noprogressbar noscriptlet quiet root verbose' 'b d h q r v')
  core=('database files help query remove sync upgrade version' 'D F Q R S U V h')

  for o in 'D database' 'F files' 'Q query' 'R remove' 'S sync' 'U upgrade'; do
    _arch_incomp "$o" && break
  done

  if [[ $? != 0 ]]; then
    _arch_ptr2comp core
  elif [[ ! $prev =~ ^-\w*[Vbhr] &&
    ! $prev = --@(cachedir|color|config|dbpath|help|hookdir|gpgdir|logfile|root|version) ]]
  then
    [[ $cur = -* ]] && _arch_ptr2comp ${o#* } common ||
      case ${o% *} in
      D|R)
          _pacman_pkg Qq;;
      F)
          _arch_incomp 'l list'   && _pikaur_cached_search
          ;;
      Q)
        { _arch_incomp 'g groups' && _pacman_pkg Qg sort; }    ||
        { _arch_incomp 'p file'   && _pacman_file; }           ||
          _arch_incomp 'o owns'   || _arch_incomp 'u upgrades' ||
          _pacman_pkg Qq;;
      S)
        { _arch_incomp 'g groups' && _pacman_pkg Sg; }      ||
        { _arch_incomp 'l list'   && _pacman_pkg Sl sort; } ||
          _pikaur_cached_search;;
      U)
          _pacman_file;;
      esac
  fi
  true
}

_pacman_file() {
  compopt -o filenames; _filedir 'pkg.tar*'
}

complete -F _pacman -o default pikaur

# ex:et ts=2 sw=2 ft=sh
