[project]
name = "pikaur"
version = '1.33'
description = 'AUR helper with minimal dependencies'
authors = [
  {name = 'Yauhen Kirylau', email = 'actionless-DOT-loveless-PLUS-aur-AT-gmail-MF-com@anti.spam'},
]
requires-python = ">=3.12"
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Environment :: Console',
  'Intended Audience :: Developers',
  'Intended Audience :: End Users/Desktop',
  'Intended Audience :: Information Technology',
  'Intended Audience :: Other Audience',
  'Intended Audience :: System Administrators',
  'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
  'Operating System :: POSIX :: Linux',
  'Programming Language :: Python :: 3.11',
  'Topic :: Software Development :: Build Tools',
  'Topic :: System :: Archiving :: Packaging',
  'Topic :: System :: Installation/Setup',
  'Topic :: Utilities',
]
dependencies = [
  "pyalpm"
]
keywords = ["arch", "linux", "aur", "helper"]
readme = "README.md"

[project.urls]
repository = 'https://github.com/actionless/pikaur'

[project.scripts]
pikaur = "pikaur.main:main"
pikasay = "pikaur.pikasay:pikasay_cli"

[tool.setuptools.packages.find]
include = ["pikaur"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.bandit]
exclude_dirs = ["./dumpster/", "./maintenance_scripts/", "./pikaur_meta_helpers/"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
extra_checks = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
mypy_path = './maintenance_scripts/mypy_stubs'
exclude_gitignore = true

[tool.ruff]
line-length = 100
unsafe-fixes = true

[tool.ruff.lint.mccabe]
max-complexity = 19

[tool.pyrefly]
search-path = ["./maintenance_scripts/mypy_stubs"]

[tool.ruff.format]
preview = true

[tool.ruff.lint]
preview = true
select = [
  "F",
  "E", "W",
  "C90",
  "I",
  "N",
  "D",
  #"DOC", pydoclint
  "UP",
  "YTT",
  "ANN",
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  #"CPY",  # copyrights
  "C4",
  "DTZ",
  "T10",
  #"DJ",  # django
  #"FAST",  # fastapi
  "EM",
  "EXE",
  "FA",
  "ISC",
  "ICN",
  "G",
  "INP",
  "PIE",
  "T20",
  "PYI",
  #"PT",  # pytest
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TC",
  "INT",
  "ARG",
  "PTH",
  "TD",
  "FIX",
  "ERA",
  #"PD",  # pandas
  "PGH",
  "PL",
  "TRY",
  "FLY",
  #"NPY",  # numpy
  "AIR",
  "PERF",
  "FURB",
  "LOG",
  "RUF",
]
ignore = [
  # enable back later:
  "ERA001", # commented out code

  # already managed by pylint, mb replace completely to ruff later:
  "PLR0904",  # too-many-public-methods
  "PLR0911",  # too-many-return-statements
  "PLR0912",  # too-many-branches
  "PLR0913",  # too-many-arguments
  "PLR0914",  # too-many-locals
  "PLR0915",  # too-many-statements
  "PLR0917",  # too-many-positional-arguments
  "PLR1702",  # too-many-nested-blocks

  "PLE1205",  # pikaur is using non-default `logging`

  "ANN401",  # disable Any

  "BLE001",  # disallow catching Exception

  "UP036", # remove code with py version checks

  # docstrings
  "D100",
  "D101",
  "D102",
  "D103",
  #
  "D105",
  "D107",
  "D203", # conflicts with D211
  "D205",
  "D212", # conflicts with D213
  "D400",
  "D401", # idk, it seems broken? pydocstyle.org is down so i can't check how it's supposed to work
  "D415",

  #"Q000",  # force double-quotes
]

[tool.ruff.lint.per-file-ignores]
"pikaur/argparse_extras.py" = [
  "PLR0912",
  "PLR0915",
  "SLF001",
]
"pikaur_test/*.py" = [
  "SLF001",
  "S404",
]
"pikaur_test/test_*.py" = [
  "ANN201",
  "ANN206",
  "PLR2004",
  "PLR6301",
  "PLC0415",
  "T201",
]
"maintenance_scripts/*.py" = [
  "INP001",
  "S301",
  "S403",
  "S404",
  "T201",
  "T203",
]
"pikaur_meta_helpers/*.py" = [
  "INP001",
  "S301",
  "S403",
  "S404",
  "T201",
  "T203",
]
"maintenance_scripts/pikaman.py" = [
  "ARG002",
  "PLR6301",
  "PLR0904",
]
"maintenance_scripts/vulture_whitelist.py" = [
  "B018",
  "SLF001",
]
"packaging/usr/bin/pikaur" = [
  "T201",
]
"pypyalpm.py" = [
  "T201",
  "PTH107",
  "PTH112",
  "PTH118",
]
"pacman_fallback.py" = [
  "T201",
  "PTH107",
  "PTH112",
  "PTH118",
]


[tool.pylint.MASTER]
jobs = '0'
extension-pkg-whitelist = 'pyalpm'
ignore = 'CVS,ignoreme.py'
ignore-patterns = ''
persistent = 'yes'
unsafe-load-any-extension = 'no'
load-plugins = 'pylint.extensions.docparams,'

[tool.pylint.PARAMETER_DOCUMENTATION]
accept-no-param-doc = 'no'
accept-no-raise-doc = 'no'
accept-no-return-doc = 'no'
accept-no-yields-doc = 'no'

[tool.pylint.'MESSAGES CONTROL']
confidence = ''
disable = 'too-few-public-methods,missing-docstring,duplicate-code,missing-return-doc,missing-param-doc,missing-yield-doc,missing-raises-doc,,too-many-nested-blocks,too-many-public-methods,too-many-arguments,too-many-locals,import-outside-toplevel'
enable = 'useless-suppression'

[tool.pylint.REPORTS]
evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
output-format = 'text'
reports = 'no'
score = 'yes'

[tool.pylint.REFACTORING]
max-nested-blocks = '5'

[tool.pylint.FORMAT]
expected-line-ending-format = 'LF'
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
indent-after-paren = '4'
indent-string = '    '
max-line-length = '100'
max-module-lines = '1000'
single-line-if-stmt = 'no'

[tool.pylint.TYPECHECK]
contextmanager-decorators = 'contextlib.contextmanager'
generated-members = 'self.props'
ignored-classes = 'optparse.Values,thread._local,_thread._local'
ignored-modules = ''
missing-member-hint = 'yes'
missing-member-hint-distance = '1'
missing-member-max-choices = '1'

[tool.pylint.SIMILARITIES]
ignore-comments = 'yes'
ignore-docstrings = 'yes'
ignore-imports = 'no'
min-similarity-lines = '4'

[tool.pylint.LOGGING]
logging-modules = 'logging'
logging-format-style = 'new'

[tool.pylint.VARIABLES]
additional-builtins = '_'
allow-global-unused-variables = 'yes'
callbacks = 'cb_,_cb'
dummy-variables-rgx = '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy'
ignored-argument-names = '_.*'
init-import = 'no'
redefining-builtins-modules = 'six.moves,future.builtins'

[tool.pylint.MISCELLANEOUS]
notes = 'FIXME,XXX'

[tool.pylint.BASIC]
argument-rgx = '(([a-z][a-z0-9_]{2,40})|(_[a-z0-9_]*))$'
attr-rgx = '(([a-z][a-z0-9_]{2,40})|(_[a-z0-9_]*))$'
bad-names = 'foo,bar,baz,toto,tutu,tata'
class-attribute-rgx = '([A-Za-z_][A-Za-z0-9_]{2,40}|(__.*__))$'
class-rgx = '[A-Z_][a-zA-Z0-9]+$'
const-rgx = '(([A-Z_][A-Z0-9_]*)|(__.*__))$'
docstring-min-length = '-1'
function-rgx = '(([a-z][a-z0-9_]{2,40})|(_[a-z0-9_]*))$'
good-names = 'i,j,k,ex,Run,_'
include-naming-hint = 'no'
inlinevar-rgx = '[A-Za-z_][A-Za-z0-9_]*$'
method-rgx = '(([a-z][a-z0-9_]{2,40})|(_[a-z0-9_]*))$'
module-rgx = '(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$'
name-group = ''
no-docstring-rgx = '^_'
property-classes = 'abc.abstractproperty'
variable-rgx = '(([a-z][a-z0-9_]{2,40})|(_[a-z0-9_]*))$'

[tool.pylint.CLASSES]
defining-attr-methods = '__init__,__new__,setUp,__enter__'
exclude-protected = '_asdict,_fields,_replace,_source,_make'

[tool.pylint.DESIGN]
max-args = '5'
max-attributes = '20'
max-bool-expr = '6'
max-branches = '12'
max-locals = '15'
max-parents = '7'
min-public-methods = '2'
max-public-methods = '20'
max-returns = '6'
max-statements = '50'

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = ''
